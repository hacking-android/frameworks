/*
 * Decompiled with CFR 0.145.
 */
package android.widget;

import android.content.res.ColorStateList;
import android.graphics.BlendMode;
import android.graphics.PorterDuff;
import android.graphics.Typeface;
import android.text.TextUtils;
import android.util.SparseArray;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.IntFlagMapping;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import android.widget.TextView;
import android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;
import android.widget._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY;
import java.util.Objects;
import java.util.Set;
import java.util.function.IntFunction;

public final class TextView$InspectionCompanion
implements InspectionCompanion<TextView> {
    private int mAutoLinkId;
    private int mAutoSizeMaxTextSizeId;
    private int mAutoSizeMinTextSizeId;
    private int mAutoSizeStepGranularityId;
    private int mAutoSizeTextTypeId;
    private int mBreakStrategyId;
    private int mCursorVisibleId;
    private int mDrawableBlendModeId;
    private int mDrawablePaddingId;
    private int mDrawableTintId;
    private int mDrawableTintModeId;
    private int mElegantTextHeightId;
    private int mEllipsizeId;
    private int mFallbackLineSpacingId;
    private int mFirstBaselineToTopHeightId;
    private int mFontFeatureSettingsId;
    private int mFreezesTextId;
    private int mGravityId;
    private int mHintId;
    private int mHyphenationFrequencyId;
    private int mImeActionIdId;
    private int mImeActionLabelId;
    private int mImeOptionsId;
    private int mIncludeFontPaddingId;
    private int mInputTypeId;
    private int mJustificationModeId;
    private int mLastBaselineToBottomHeightId;
    private int mLetterSpacingId;
    private int mLineHeightId;
    private int mLineSpacingExtraId;
    private int mLineSpacingMultiplierId;
    private int mLinksClickableId;
    private int mMarqueeRepeatLimitId;
    private int mMaxEmsId;
    private int mMaxHeightId;
    private int mMaxLinesId;
    private int mMaxWidthId;
    private int mMinEmsId;
    private int mMinLinesId;
    private int mMinWidthId;
    private int mPrivateImeOptionsId;
    private boolean mPropertiesMapped = false;
    private int mScrollHorizontallyId;
    private int mShadowColorId;
    private int mShadowDxId;
    private int mShadowDyId;
    private int mShadowRadiusId;
    private int mSingleLineId;
    private int mTextAllCapsId;
    private int mTextColorHighlightId;
    private int mTextColorHintId;
    private int mTextColorId;
    private int mTextColorLinkId;
    private int mTextId;
    private int mTextIsSelectableId;
    private int mTextScaleXId;
    private int mTextSizeId;
    private int mTypefaceId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        SparseArray<String> sparseArray = new IntFlagMapping();
        ((IntFlagMapping)((Object)sparseArray)).add(2, 2, "email");
        ((IntFlagMapping)((Object)sparseArray)).add(8, 8, "map");
        ((IntFlagMapping)((Object)sparseArray)).add(4, 4, "phone");
        ((IntFlagMapping)((Object)sparseArray)).add(1, 1, "web");
        Objects.requireNonNull(sparseArray);
        this.mAutoLinkId = propertyMapper.mapIntFlag("autoLink", 16842928, new _$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY((IntFlagMapping)((Object)sparseArray)));
        this.mAutoSizeMaxTextSizeId = propertyMapper.mapInt("autoSizeMaxTextSize", 16844102);
        this.mAutoSizeMinTextSizeId = propertyMapper.mapInt("autoSizeMinTextSize", 16844088);
        this.mAutoSizeStepGranularityId = propertyMapper.mapInt("autoSizeStepGranularity", 16844086);
        sparseArray = new SparseArray();
        sparseArray.put(0, "none");
        sparseArray.put(1, "uniform");
        Objects.requireNonNull(sparseArray);
        this.mAutoSizeTextTypeId = propertyMapper.mapIntEnum("autoSizeTextType", 16844085, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        sparseArray = new SparseArray<String>();
        sparseArray.put(0, "simple");
        sparseArray.put(1, "high_quality");
        sparseArray.put(2, "balanced");
        Objects.requireNonNull(sparseArray);
        this.mBreakStrategyId = propertyMapper.mapIntEnum("breakStrategy", 16843997, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        this.mCursorVisibleId = propertyMapper.mapBoolean("cursorVisible", 16843090);
        this.mDrawableBlendModeId = propertyMapper.mapObject("drawableBlendMode", 80);
        this.mDrawablePaddingId = propertyMapper.mapInt("drawablePadding", 16843121);
        this.mDrawableTintId = propertyMapper.mapObject("drawableTint", 16843990);
        this.mDrawableTintModeId = propertyMapper.mapObject("drawableTintMode", 16843991);
        this.mElegantTextHeightId = propertyMapper.mapBoolean("elegantTextHeight", 16843869);
        this.mEllipsizeId = propertyMapper.mapObject("ellipsize", 16842923);
        this.mFallbackLineSpacingId = propertyMapper.mapBoolean("fallbackLineSpacing", 16844155);
        this.mFirstBaselineToTopHeightId = propertyMapper.mapInt("firstBaselineToTopHeight", 16844157);
        this.mFontFeatureSettingsId = propertyMapper.mapObject("fontFeatureSettings", 16843959);
        this.mFreezesTextId = propertyMapper.mapBoolean("freezesText", 16843116);
        this.mGravityId = propertyMapper.mapGravity("gravity", 16842927);
        this.mHintId = propertyMapper.mapObject("hint", 16843088);
        sparseArray = new SparseArray();
        sparseArray.put(0, "none");
        sparseArray.put(1, "normal");
        sparseArray.put(2, "full");
        Objects.requireNonNull(sparseArray);
        this.mHyphenationFrequencyId = propertyMapper.mapIntEnum("hyphenationFrequency", 16843998, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        this.mImeActionIdId = propertyMapper.mapInt("imeActionId", 16843366);
        this.mImeActionLabelId = propertyMapper.mapObject("imeActionLabel", 16843365);
        sparseArray = new IntFlagMapping();
        ((IntFlagMapping)((Object)sparseArray)).add(255, 6, "actionDone");
        ((IntFlagMapping)((Object)sparseArray)).add(255, 2, "actionGo");
        ((IntFlagMapping)((Object)sparseArray)).add(255, 5, "actionNext");
        ((IntFlagMapping)((Object)sparseArray)).add(255, 1, "actionNone");
        ((IntFlagMapping)((Object)sparseArray)).add(255, 7, "actionPrevious");
        ((IntFlagMapping)((Object)sparseArray)).add(255, 3, "actionSearch");
        ((IntFlagMapping)((Object)sparseArray)).add(255, 4, "actionSend");
        ((IntFlagMapping)((Object)sparseArray)).add(255, 0, "actionUnspecified");
        ((IntFlagMapping)((Object)sparseArray)).add(Integer.MIN_VALUE, Integer.MIN_VALUE, "flagForceAscii");
        ((IntFlagMapping)((Object)sparseArray)).add(134217728, 134217728, "flagNavigateNext");
        ((IntFlagMapping)((Object)sparseArray)).add(67108864, 67108864, "flagNavigatePrevious");
        ((IntFlagMapping)((Object)sparseArray)).add(536870912, 536870912, "flagNoAccessoryAction");
        ((IntFlagMapping)((Object)sparseArray)).add(1073741824, 1073741824, "flagNoEnterAction");
        ((IntFlagMapping)((Object)sparseArray)).add(268435456, 268435456, "flagNoExtractUi");
        ((IntFlagMapping)((Object)sparseArray)).add(33554432, 33554432, "flagNoFullscreen");
        ((IntFlagMapping)((Object)sparseArray)).add(16777216, 16777216, "flagNoPersonalizedLearning");
        ((IntFlagMapping)((Object)sparseArray)).add(-1, 0, "normal");
        Objects.requireNonNull(sparseArray);
        this.mImeOptionsId = propertyMapper.mapIntFlag("imeOptions", 16843364, new _$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY((IntFlagMapping)((Object)sparseArray)));
        this.mIncludeFontPaddingId = propertyMapper.mapBoolean("includeFontPadding", 16843103);
        sparseArray = new IntFlagMapping();
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 20, "date");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 4, "datetime");
        ((IntFlagMapping)((Object)sparseArray)).add(-1, 0, "none");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 2, "number");
        ((IntFlagMapping)((Object)sparseArray)).add(16773135, 8194, "numberDecimal");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 18, "numberPassword");
        ((IntFlagMapping)((Object)sparseArray)).add(16773135, 4098, "numberSigned");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 3, "phone");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 1, "text");
        ((IntFlagMapping)((Object)sparseArray)).add(16773135, 65537, "textAutoComplete");
        ((IntFlagMapping)((Object)sparseArray)).add(16773135, 32769, "textAutoCorrect");
        ((IntFlagMapping)((Object)sparseArray)).add(16773135, 4097, "textCapCharacters");
        ((IntFlagMapping)((Object)sparseArray)).add(16773135, 16385, "textCapSentences");
        ((IntFlagMapping)((Object)sparseArray)).add(16773135, 8193, "textCapWords");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 33, "textEmailAddress");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 49, "textEmailSubject");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 177, "textFilter");
        ((IntFlagMapping)((Object)sparseArray)).add(16773135, 262145, "textImeMultiLine");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 81, "textLongMessage");
        ((IntFlagMapping)((Object)sparseArray)).add(16773135, 131073, "textMultiLine");
        ((IntFlagMapping)((Object)sparseArray)).add(16773135, 524289, "textNoSuggestions");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 129, "textPassword");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 97, "textPersonName");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 193, "textPhonetic");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 113, "textPostalAddress");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 65, "textShortMessage");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 17, "textUri");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 145, "textVisiblePassword");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 161, "textWebEditText");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 209, "textWebEmailAddress");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 225, "textWebPassword");
        ((IntFlagMapping)((Object)sparseArray)).add(4095, 36, "time");
        Objects.requireNonNull(sparseArray);
        this.mInputTypeId = propertyMapper.mapIntFlag("inputType", 16843296, new _$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY((IntFlagMapping)((Object)sparseArray)));
        sparseArray = new SparseArray<String>();
        sparseArray.put(0, "none");
        sparseArray.put(1, "inter_word");
        Objects.requireNonNull(sparseArray);
        this.mJustificationModeId = propertyMapper.mapIntEnum("justificationMode", 16844135, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        this.mLastBaselineToBottomHeightId = propertyMapper.mapInt("lastBaselineToBottomHeight", 16844158);
        this.mLetterSpacingId = propertyMapper.mapFloat("letterSpacing", 16843958);
        this.mLineHeightId = propertyMapper.mapInt("lineHeight", 16844159);
        this.mLineSpacingExtraId = propertyMapper.mapFloat("lineSpacingExtra", 16843287);
        this.mLineSpacingMultiplierId = propertyMapper.mapFloat("lineSpacingMultiplier", 16843288);
        this.mLinksClickableId = propertyMapper.mapBoolean("linksClickable", 16842929);
        this.mMarqueeRepeatLimitId = propertyMapper.mapInt("marqueeRepeatLimit", 16843293);
        this.mMaxEmsId = propertyMapper.mapInt("maxEms", 16843095);
        this.mMaxHeightId = propertyMapper.mapInt("maxHeight", 16843040);
        this.mMaxLinesId = propertyMapper.mapInt("maxLines", 16843091);
        this.mMaxWidthId = propertyMapper.mapInt("maxWidth", 16843039);
        this.mMinEmsId = propertyMapper.mapInt("minEms", 16843098);
        this.mMinLinesId = propertyMapper.mapInt("minLines", 16843094);
        this.mMinWidthId = propertyMapper.mapInt("minWidth", 16843071);
        this.mPrivateImeOptionsId = propertyMapper.mapObject("privateImeOptions", 16843299);
        this.mScrollHorizontallyId = propertyMapper.mapBoolean("scrollHorizontally", 16843099);
        this.mShadowColorId = propertyMapper.mapColor("shadowColor", 16843105);
        this.mShadowDxId = propertyMapper.mapFloat("shadowDx", 16843106);
        this.mShadowDyId = propertyMapper.mapFloat("shadowDy", 16843107);
        this.mShadowRadiusId = propertyMapper.mapFloat("shadowRadius", 16843108);
        this.mSingleLineId = propertyMapper.mapBoolean("singleLine", 16843101);
        this.mTextId = propertyMapper.mapObject("text", 16843087);
        this.mTextAllCapsId = propertyMapper.mapBoolean("textAllCaps", 16843660);
        this.mTextColorId = propertyMapper.mapObject("textColor", 16842904);
        this.mTextColorHighlightId = propertyMapper.mapColor("textColorHighlight", 16842905);
        this.mTextColorHintId = propertyMapper.mapObject("textColorHint", 16842906);
        this.mTextColorLinkId = propertyMapper.mapObject("textColorLink", 16842907);
        this.mTextIsSelectableId = propertyMapper.mapBoolean("textIsSelectable", 16843542);
        this.mTextScaleXId = propertyMapper.mapFloat("textScaleX", 16843089);
        this.mTextSizeId = propertyMapper.mapFloat("textSize", 16842901);
        this.mTypefaceId = propertyMapper.mapObject("typeface", 16842902);
        this.mPropertiesMapped = true;
    }

    @Override
    public void readProperties(TextView textView, PropertyReader propertyReader) {
        if (this.mPropertiesMapped) {
            propertyReader.readIntFlag(this.mAutoLinkId, textView.getAutoLinkMask());
            propertyReader.readInt(this.mAutoSizeMaxTextSizeId, textView.getAutoSizeMaxTextSize());
            propertyReader.readInt(this.mAutoSizeMinTextSizeId, textView.getAutoSizeMinTextSize());
            propertyReader.readInt(this.mAutoSizeStepGranularityId, textView.getAutoSizeStepGranularity());
            propertyReader.readIntEnum(this.mAutoSizeTextTypeId, textView.getAutoSizeTextType());
            propertyReader.readIntEnum(this.mBreakStrategyId, textView.getBreakStrategy());
            propertyReader.readBoolean(this.mCursorVisibleId, textView.isCursorVisible());
            propertyReader.readObject(this.mDrawableBlendModeId, (Object)textView.getCompoundDrawableTintBlendMode());
            propertyReader.readInt(this.mDrawablePaddingId, textView.getCompoundDrawablePadding());
            propertyReader.readObject(this.mDrawableTintId, textView.getCompoundDrawableTintList());
            propertyReader.readObject(this.mDrawableTintModeId, (Object)textView.getCompoundDrawableTintMode());
            propertyReader.readBoolean(this.mElegantTextHeightId, textView.isElegantTextHeight());
            propertyReader.readObject(this.mEllipsizeId, (Object)textView.getEllipsize());
            propertyReader.readBoolean(this.mFallbackLineSpacingId, textView.isFallbackLineSpacing());
            propertyReader.readInt(this.mFirstBaselineToTopHeightId, textView.getFirstBaselineToTopHeight());
            propertyReader.readObject(this.mFontFeatureSettingsId, textView.getFontFeatureSettings());
            propertyReader.readBoolean(this.mFreezesTextId, textView.getFreezesText());
            propertyReader.readGravity(this.mGravityId, textView.getGravity());
            propertyReader.readObject(this.mHintId, textView.getHint());
            propertyReader.readIntEnum(this.mHyphenationFrequencyId, textView.getHyphenationFrequency());
            propertyReader.readInt(this.mImeActionIdId, textView.getImeActionId());
            propertyReader.readObject(this.mImeActionLabelId, textView.getImeActionLabel());
            propertyReader.readIntFlag(this.mImeOptionsId, textView.getImeOptions());
            propertyReader.readBoolean(this.mIncludeFontPaddingId, textView.getIncludeFontPadding());
            propertyReader.readIntFlag(this.mInputTypeId, textView.getInputType());
            propertyReader.readIntEnum(this.mJustificationModeId, textView.getJustificationMode());
            propertyReader.readInt(this.mLastBaselineToBottomHeightId, textView.getLastBaselineToBottomHeight());
            propertyReader.readFloat(this.mLetterSpacingId, textView.getLetterSpacing());
            propertyReader.readInt(this.mLineHeightId, textView.getLineHeight());
            propertyReader.readFloat(this.mLineSpacingExtraId, textView.getLineSpacingExtra());
            propertyReader.readFloat(this.mLineSpacingMultiplierId, textView.getLineSpacingMultiplier());
            propertyReader.readBoolean(this.mLinksClickableId, textView.getLinksClickable());
            propertyReader.readInt(this.mMarqueeRepeatLimitId, textView.getMarqueeRepeatLimit());
            propertyReader.readInt(this.mMaxEmsId, textView.getMaxEms());
            propertyReader.readInt(this.mMaxHeightId, textView.getMaxHeight());
            propertyReader.readInt(this.mMaxLinesId, textView.getMaxLines());
            propertyReader.readInt(this.mMaxWidthId, textView.getMaxWidth());
            propertyReader.readInt(this.mMinEmsId, textView.getMinEms());
            propertyReader.readInt(this.mMinLinesId, textView.getMinLines());
            propertyReader.readInt(this.mMinWidthId, textView.getMinWidth());
            propertyReader.readObject(this.mPrivateImeOptionsId, textView.getPrivateImeOptions());
            propertyReader.readBoolean(this.mScrollHorizontallyId, textView.isHorizontallyScrollable());
            propertyReader.readColor(this.mShadowColorId, textView.getShadowColor());
            propertyReader.readFloat(this.mShadowDxId, textView.getShadowDx());
            propertyReader.readFloat(this.mShadowDyId, textView.getShadowDy());
            propertyReader.readFloat(this.mShadowRadiusId, textView.getShadowRadius());
            propertyReader.readBoolean(this.mSingleLineId, textView.isSingleLine());
            propertyReader.readObject(this.mTextId, textView.getText());
            propertyReader.readBoolean(this.mTextAllCapsId, textView.isAllCaps());
            propertyReader.readObject(this.mTextColorId, textView.getTextColors());
            propertyReader.readColor(this.mTextColorHighlightId, textView.getHighlightColor());
            propertyReader.readObject(this.mTextColorHintId, textView.getHintTextColors());
            propertyReader.readObject(this.mTextColorLinkId, textView.getLinkTextColors());
            propertyReader.readBoolean(this.mTextIsSelectableId, textView.isTextSelectable());
            propertyReader.readFloat(this.mTextScaleXId, textView.getTextScaleX());
            propertyReader.readFloat(this.mTextSizeId, textView.getTextSize());
            propertyReader.readObject(this.mTypefaceId, textView.getTypeface());
            return;
        }
        throw new InspectionCompanion.UninitializedPropertyMapException();
    }
}

