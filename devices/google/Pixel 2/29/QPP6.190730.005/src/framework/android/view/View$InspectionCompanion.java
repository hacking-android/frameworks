/*
 * Decompiled with CFR 0.145.
 */
package android.view;

import android.animation.StateListAnimator;
import android.content.res.ColorStateList;
import android.graphics.PorterDuff;
import android.graphics.drawable.Drawable;
import android.util.SparseArray;
import android.view.PointerIcon;
import android.view.View;
import android.view.ViewOutlineProvider;
import android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;
import android.view._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY;
import android.view.inspector.InspectionCompanion;
import android.view.inspector.IntFlagMapping;
import android.view.inspector.PropertyMapper;
import android.view.inspector.PropertyReader;
import java.util.Objects;
import java.util.Set;
import java.util.function.IntFunction;

public final class View$InspectionCompanion
implements InspectionCompanion<View> {
    private int mAccessibilityFocusedId;
    private int mAccessibilityHeadingId;
    private int mAccessibilityLiveRegionId;
    private int mAccessibilityPaneTitleId;
    private int mAccessibilityTraversalAfterId;
    private int mAccessibilityTraversalBeforeId;
    private int mActivatedId;
    private int mAlphaId;
    private int mAutofillHintsId;
    private int mBackgroundId;
    private int mBackgroundTintId;
    private int mBackgroundTintModeId;
    private int mBaselineId;
    private int mClickableId;
    private int mContentDescriptionId;
    private int mContextClickableId;
    private int mDefaultFocusHighlightEnabledId;
    private int mDrawingCacheQualityId;
    private int mDuplicateParentStateId;
    private int mElevationId;
    private int mEnabledId;
    private int mFadingEdgeLengthId;
    private int mFilterTouchesWhenObscuredId;
    private int mFitsSystemWindowsId;
    private int mFocusableId;
    private int mFocusableInTouchModeId;
    private int mFocusedByDefaultId;
    private int mFocusedId;
    private int mForceDarkAllowedId;
    private int mForegroundGravityId;
    private int mForegroundId;
    private int mForegroundTintId;
    private int mForegroundTintModeId;
    private int mHapticFeedbackEnabledId;
    private int mIdId;
    private int mImportantForAccessibilityId;
    private int mImportantForAutofillId;
    private int mIsScrollContainerId;
    private int mKeepScreenOnId;
    private int mKeyboardNavigationClusterId;
    private int mLabelForId;
    private int mLayerTypeId;
    private int mLayoutDirectionId;
    private int mLongClickableId;
    private int mMinHeightId;
    private int mMinWidthId;
    private int mNestedScrollingEnabledId;
    private int mNextClusterForwardId;
    private int mNextFocusDownId;
    private int mNextFocusForwardId;
    private int mNextFocusLeftId;
    private int mNextFocusRightId;
    private int mNextFocusUpId;
    private int mOutlineAmbientShadowColorId;
    private int mOutlineProviderId;
    private int mOutlineSpotShadowColorId;
    private int mOverScrollModeId;
    private int mPaddingBottomId;
    private int mPaddingLeftId;
    private int mPaddingRightId;
    private int mPaddingTopId;
    private int mPointerIconId;
    private int mPressedId;
    private boolean mPropertiesMapped = false;
    private int mRawLayoutDirectionId;
    private int mRawTextAlignmentId;
    private int mRawTextDirectionId;
    private int mRequiresFadingEdgeId;
    private int mRotationId;
    private int mRotationXId;
    private int mRotationYId;
    private int mSaveEnabledId;
    private int mScaleXId;
    private int mScaleYId;
    private int mScreenReaderFocusableId;
    private int mScrollIndicatorsId;
    private int mScrollXId;
    private int mScrollYId;
    private int mScrollbarDefaultDelayBeforeFadeId;
    private int mScrollbarFadeDurationId;
    private int mScrollbarSizeId;
    private int mScrollbarStyleId;
    private int mSelectedId;
    private int mSolidColorId;
    private int mSoundEffectsEnabledId;
    private int mStateListAnimatorId;
    private int mTagId;
    private int mTextAlignmentId;
    private int mTextDirectionId;
    private int mTooltipTextId;
    private int mTransformPivotXId;
    private int mTransformPivotYId;
    private int mTransitionNameId;
    private int mTranslationXId;
    private int mTranslationYId;
    private int mTranslationZId;
    private int mVisibilityId;

    @Override
    public void mapProperties(PropertyMapper propertyMapper) {
        this.mAccessibilityFocusedId = propertyMapper.mapBoolean("accessibilityFocused", 0);
        this.mAccessibilityHeadingId = propertyMapper.mapBoolean("accessibilityHeading", 16844160);
        SparseArray<String> sparseArray = new SparseArray<String>();
        sparseArray.put(0, "none");
        sparseArray.put(1, "polite");
        sparseArray.put(2, "assertive");
        Objects.requireNonNull(sparseArray);
        this.mAccessibilityLiveRegionId = propertyMapper.mapIntEnum("accessibilityLiveRegion", 16843758, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        this.mAccessibilityPaneTitleId = propertyMapper.mapObject("accessibilityPaneTitle", 16844156);
        this.mAccessibilityTraversalAfterId = propertyMapper.mapResourceId("accessibilityTraversalAfter", 16843986);
        this.mAccessibilityTraversalBeforeId = propertyMapper.mapResourceId("accessibilityTraversalBefore", 16843985);
        this.mActivatedId = propertyMapper.mapBoolean("activated", 0);
        this.mAlphaId = propertyMapper.mapFloat("alpha", 16843551);
        this.mAutofillHintsId = propertyMapper.mapObject("autofillHints", 16844118);
        this.mBackgroundId = propertyMapper.mapObject("background", 16842964);
        this.mBackgroundTintId = propertyMapper.mapObject("backgroundTint", 16843883);
        this.mBackgroundTintModeId = propertyMapper.mapObject("backgroundTintMode", 16843884);
        this.mBaselineId = propertyMapper.mapInt("baseline", 16843548);
        this.mClickableId = propertyMapper.mapBoolean("clickable", 16842981);
        this.mContentDescriptionId = propertyMapper.mapObject("contentDescription", 16843379);
        this.mContextClickableId = propertyMapper.mapBoolean("contextClickable", 16844007);
        this.mDefaultFocusHighlightEnabledId = propertyMapper.mapBoolean("defaultFocusHighlightEnabled", 16844130);
        sparseArray = new SparseArray();
        sparseArray.put(0, "auto");
        sparseArray.put(524288, "low");
        sparseArray.put(1048576, "high");
        Objects.requireNonNull(sparseArray);
        this.mDrawingCacheQualityId = propertyMapper.mapIntEnum("drawingCacheQuality", 16842984, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        this.mDuplicateParentStateId = propertyMapper.mapBoolean("duplicateParentState", 16842985);
        this.mElevationId = propertyMapper.mapFloat("elevation", 16843840);
        this.mEnabledId = propertyMapper.mapBoolean("enabled", 16842766);
        this.mFadingEdgeLengthId = propertyMapper.mapInt("fadingEdgeLength", 16842976);
        this.mFilterTouchesWhenObscuredId = propertyMapper.mapBoolean("filterTouchesWhenObscured", 16843460);
        this.mFitsSystemWindowsId = propertyMapper.mapBoolean("fitsSystemWindows", 16842973);
        sparseArray = new SparseArray();
        sparseArray.put(0, "false");
        sparseArray.put(1, "true");
        sparseArray.put(16, "auto");
        Objects.requireNonNull(sparseArray);
        this.mFocusableId = propertyMapper.mapIntEnum("focusable", 16842970, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        this.mFocusableInTouchModeId = propertyMapper.mapBoolean("focusableInTouchMode", 16842971);
        this.mFocusedId = propertyMapper.mapBoolean("focused", 0);
        this.mFocusedByDefaultId = propertyMapper.mapBoolean("focusedByDefault", 16844100);
        this.mForceDarkAllowedId = propertyMapper.mapBoolean("forceDarkAllowed", 16844172);
        this.mForegroundId = propertyMapper.mapObject("foreground", 16843017);
        this.mForegroundGravityId = propertyMapper.mapGravity("foregroundGravity", 16843264);
        this.mForegroundTintId = propertyMapper.mapObject("foregroundTint", 16843885);
        this.mForegroundTintModeId = propertyMapper.mapObject("foregroundTintMode", 16843886);
        this.mHapticFeedbackEnabledId = propertyMapper.mapBoolean("hapticFeedbackEnabled", 16843358);
        this.mIdId = propertyMapper.mapResourceId("id", 16842960);
        sparseArray = new SparseArray();
        sparseArray.put(0, "auto");
        sparseArray.put(1, "yes");
        sparseArray.put(2, "no");
        sparseArray.put(4, "noHideDescendants");
        Objects.requireNonNull(sparseArray);
        this.mImportantForAccessibilityId = propertyMapper.mapIntEnum("importantForAccessibility", 16843690, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        sparseArray = new SparseArray();
        sparseArray.put(0, "auto");
        sparseArray.put(1, "yes");
        sparseArray.put(2, "no");
        sparseArray.put(4, "yesExcludeDescendants");
        sparseArray.put(8, "noExcludeDescendants");
        Objects.requireNonNull(sparseArray);
        this.mImportantForAutofillId = propertyMapper.mapIntEnum("importantForAutofill", 16844120, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        this.mIsScrollContainerId = propertyMapper.mapBoolean("isScrollContainer", 16843342);
        this.mKeepScreenOnId = propertyMapper.mapBoolean("keepScreenOn", 16843286);
        this.mKeyboardNavigationClusterId = propertyMapper.mapBoolean("keyboardNavigationCluster", 16844096);
        this.mLabelForId = propertyMapper.mapResourceId("labelFor", 16843718);
        sparseArray = new SparseArray();
        sparseArray.put(0, "none");
        sparseArray.put(1, "software");
        sparseArray.put(2, "hardware");
        Objects.requireNonNull(sparseArray);
        this.mLayerTypeId = propertyMapper.mapIntEnum("layerType", 16843604, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        sparseArray = new SparseArray();
        sparseArray.put(0, "ltr");
        sparseArray.put(1, "rtl");
        Objects.requireNonNull(sparseArray);
        this.mLayoutDirectionId = propertyMapper.mapIntEnum("layoutDirection", 16843698, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        this.mLongClickableId = propertyMapper.mapBoolean("longClickable", 16842982);
        this.mMinHeightId = propertyMapper.mapInt("minHeight", 16843072);
        this.mMinWidthId = propertyMapper.mapInt("minWidth", 16843071);
        this.mNestedScrollingEnabledId = propertyMapper.mapBoolean("nestedScrollingEnabled", 16843830);
        this.mNextClusterForwardId = propertyMapper.mapResourceId("nextClusterForward", 16844098);
        this.mNextFocusDownId = propertyMapper.mapResourceId("nextFocusDown", 16842980);
        this.mNextFocusForwardId = propertyMapper.mapResourceId("nextFocusForward", 16843580);
        this.mNextFocusLeftId = propertyMapper.mapResourceId("nextFocusLeft", 16842977);
        this.mNextFocusRightId = propertyMapper.mapResourceId("nextFocusRight", 16842978);
        this.mNextFocusUpId = propertyMapper.mapResourceId("nextFocusUp", 16842979);
        this.mOutlineAmbientShadowColorId = propertyMapper.mapColor("outlineAmbientShadowColor", 16844162);
        this.mOutlineProviderId = propertyMapper.mapObject("outlineProvider", 16843960);
        this.mOutlineSpotShadowColorId = propertyMapper.mapColor("outlineSpotShadowColor", 16844161);
        sparseArray = new SparseArray();
        sparseArray.put(0, "always");
        sparseArray.put(1, "ifContentScrolls");
        sparseArray.put(2, "never");
        Objects.requireNonNull(sparseArray);
        this.mOverScrollModeId = propertyMapper.mapIntEnum("overScrollMode", 16843457, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        this.mPaddingBottomId = propertyMapper.mapInt("paddingBottom", 16842969);
        this.mPaddingLeftId = propertyMapper.mapInt("paddingLeft", 16842966);
        this.mPaddingRightId = propertyMapper.mapInt("paddingRight", 16842968);
        this.mPaddingTopId = propertyMapper.mapInt("paddingTop", 16842967);
        this.mPointerIconId = propertyMapper.mapObject("pointerIcon", 16844041);
        this.mPressedId = propertyMapper.mapBoolean("pressed", 0);
        sparseArray = new SparseArray();
        sparseArray.put(0, "ltr");
        sparseArray.put(1, "rtl");
        sparseArray.put(2, "inherit");
        sparseArray.put(3, "locale");
        Objects.requireNonNull(sparseArray);
        this.mRawLayoutDirectionId = propertyMapper.mapIntEnum("rawLayoutDirection", 0, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        sparseArray = new SparseArray();
        sparseArray.put(0, "inherit");
        sparseArray.put(1, "gravity");
        sparseArray.put(2, "textStart");
        sparseArray.put(3, "textEnd");
        sparseArray.put(4, "center");
        sparseArray.put(5, "viewStart");
        sparseArray.put(6, "viewEnd");
        Objects.requireNonNull(sparseArray);
        this.mRawTextAlignmentId = propertyMapper.mapIntEnum("rawTextAlignment", 0, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        sparseArray = new SparseArray();
        sparseArray.put(0, "inherit");
        sparseArray.put(1, "firstStrong");
        sparseArray.put(2, "anyRtl");
        sparseArray.put(3, "ltr");
        sparseArray.put(4, "rtl");
        sparseArray.put(5, "locale");
        sparseArray.put(6, "firstStrongLtr");
        sparseArray.put(7, "firstStrongRtl");
        Objects.requireNonNull(sparseArray);
        this.mRawTextDirectionId = propertyMapper.mapIntEnum("rawTextDirection", 0, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        sparseArray = new IntFlagMapping();
        ((IntFlagMapping)((Object)sparseArray)).add(4096, 4096, "horizontal");
        ((IntFlagMapping)((Object)sparseArray)).add(12288, 0, "none");
        ((IntFlagMapping)((Object)sparseArray)).add(8192, 8192, "vertical");
        Objects.requireNonNull(sparseArray);
        this.mRequiresFadingEdgeId = propertyMapper.mapIntFlag("requiresFadingEdge", 16843685, new _$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY((IntFlagMapping)((Object)sparseArray)));
        this.mRotationId = propertyMapper.mapFloat("rotation", 16843558);
        this.mRotationXId = propertyMapper.mapFloat("rotationX", 16843559);
        this.mRotationYId = propertyMapper.mapFloat("rotationY", 16843560);
        this.mSaveEnabledId = propertyMapper.mapBoolean("saveEnabled", 16842983);
        this.mScaleXId = propertyMapper.mapFloat("scaleX", 16843556);
        this.mScaleYId = propertyMapper.mapFloat("scaleY", 16843557);
        this.mScreenReaderFocusableId = propertyMapper.mapBoolean("screenReaderFocusable", 16844148);
        sparseArray = new IntFlagMapping();
        ((IntFlagMapping)((Object)sparseArray)).add(2, 2, "bottom");
        ((IntFlagMapping)((Object)sparseArray)).add(32, 32, "end");
        ((IntFlagMapping)((Object)sparseArray)).add(4, 4, "left");
        ((IntFlagMapping)((Object)sparseArray)).add(-1, 0, "none");
        ((IntFlagMapping)((Object)sparseArray)).add(8, 8, "right");
        ((IntFlagMapping)((Object)sparseArray)).add(16, 16, "start");
        ((IntFlagMapping)((Object)sparseArray)).add(1, 1, "top");
        Objects.requireNonNull(sparseArray);
        this.mScrollIndicatorsId = propertyMapper.mapIntFlag("scrollIndicators", 16844006, new _$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY((IntFlagMapping)((Object)sparseArray)));
        this.mScrollXId = propertyMapper.mapInt("scrollX", 16842962);
        this.mScrollYId = propertyMapper.mapInt("scrollY", 16842963);
        this.mScrollbarDefaultDelayBeforeFadeId = propertyMapper.mapInt("scrollbarDefaultDelayBeforeFade", 16843433);
        this.mScrollbarFadeDurationId = propertyMapper.mapInt("scrollbarFadeDuration", 16843432);
        this.mScrollbarSizeId = propertyMapper.mapInt("scrollbarSize", 16842851);
        sparseArray = new SparseArray<String>();
        sparseArray.put(0, "insideOverlay");
        sparseArray.put(16777216, "insideInset");
        sparseArray.put(33554432, "outsideOverlay");
        sparseArray.put(50331648, "outsideInset");
        Objects.requireNonNull(sparseArray);
        this.mScrollbarStyleId = propertyMapper.mapIntEnum("scrollbarStyle", 16842879, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        this.mSelectedId = propertyMapper.mapBoolean("selected", 0);
        this.mSolidColorId = propertyMapper.mapColor("solidColor", 16843594);
        this.mSoundEffectsEnabledId = propertyMapper.mapBoolean("soundEffectsEnabled", 16843285);
        this.mStateListAnimatorId = propertyMapper.mapObject("stateListAnimator", 16843848);
        this.mTagId = propertyMapper.mapObject("tag", 16842961);
        sparseArray = new SparseArray();
        sparseArray.put(1, "gravity");
        sparseArray.put(2, "textStart");
        sparseArray.put(3, "textEnd");
        sparseArray.put(4, "center");
        sparseArray.put(5, "viewStart");
        sparseArray.put(6, "viewEnd");
        Objects.requireNonNull(sparseArray);
        this.mTextAlignmentId = propertyMapper.mapIntEnum("textAlignment", 16843697, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        sparseArray = new SparseArray();
        sparseArray.put(1, "firstStrong");
        sparseArray.put(2, "anyRtl");
        sparseArray.put(3, "ltr");
        sparseArray.put(4, "rtl");
        sparseArray.put(5, "locale");
        sparseArray.put(6, "firstStrongLtr");
        sparseArray.put(7, "firstStrongRtl");
        Objects.requireNonNull(sparseArray);
        this.mTextDirectionId = propertyMapper.mapIntEnum("textDirection", 0, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        this.mTooltipTextId = propertyMapper.mapObject("tooltipText", 16844084);
        this.mTransformPivotXId = propertyMapper.mapFloat("transformPivotX", 16843552);
        this.mTransformPivotYId = propertyMapper.mapFloat("transformPivotY", 16843553);
        this.mTransitionNameId = propertyMapper.mapObject("transitionName", 16843776);
        this.mTranslationXId = propertyMapper.mapFloat("translationX", 16843554);
        this.mTranslationYId = propertyMapper.mapFloat("translationY", 16843555);
        this.mTranslationZId = propertyMapper.mapFloat("translationZ", 16843770);
        sparseArray = new SparseArray();
        sparseArray.put(0, "visible");
        sparseArray.put(4, "invisible");
        sparseArray.put(8, "gone");
        Objects.requireNonNull(sparseArray);
        this.mVisibilityId = propertyMapper.mapIntEnum("visibility", 16842972, new _$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI(sparseArray));
        this.mPropertiesMapped = true;
    }

    @Override
    public void readProperties(View view, PropertyReader propertyReader) {
        if (this.mPropertiesMapped) {
            propertyReader.readBoolean(this.mAccessibilityFocusedId, view.isAccessibilityFocused());
            propertyReader.readBoolean(this.mAccessibilityHeadingId, view.isAccessibilityHeading());
            propertyReader.readIntEnum(this.mAccessibilityLiveRegionId, view.getAccessibilityLiveRegion());
            propertyReader.readObject(this.mAccessibilityPaneTitleId, view.getAccessibilityPaneTitle());
            propertyReader.readResourceId(this.mAccessibilityTraversalAfterId, view.getAccessibilityTraversalAfter());
            propertyReader.readResourceId(this.mAccessibilityTraversalBeforeId, view.getAccessibilityTraversalBefore());
            propertyReader.readBoolean(this.mActivatedId, view.isActivated());
            propertyReader.readFloat(this.mAlphaId, view.getAlpha());
            propertyReader.readObject(this.mAutofillHintsId, view.getAutofillHints());
            propertyReader.readObject(this.mBackgroundId, view.getBackground());
            propertyReader.readObject(this.mBackgroundTintId, view.getBackgroundTintList());
            propertyReader.readObject(this.mBackgroundTintModeId, (Object)view.getBackgroundTintMode());
            propertyReader.readInt(this.mBaselineId, view.getBaseline());
            propertyReader.readBoolean(this.mClickableId, view.isClickable());
            propertyReader.readObject(this.mContentDescriptionId, view.getContentDescription());
            propertyReader.readBoolean(this.mContextClickableId, view.isContextClickable());
            propertyReader.readBoolean(this.mDefaultFocusHighlightEnabledId, view.getDefaultFocusHighlightEnabled());
            propertyReader.readIntEnum(this.mDrawingCacheQualityId, view.getDrawingCacheQuality());
            propertyReader.readBoolean(this.mDuplicateParentStateId, view.isDuplicateParentStateEnabled());
            propertyReader.readFloat(this.mElevationId, view.getElevation());
            propertyReader.readBoolean(this.mEnabledId, view.isEnabled());
            propertyReader.readInt(this.mFadingEdgeLengthId, view.getFadingEdgeLength());
            propertyReader.readBoolean(this.mFilterTouchesWhenObscuredId, view.getFilterTouchesWhenObscured());
            propertyReader.readBoolean(this.mFitsSystemWindowsId, view.getFitsSystemWindows());
            propertyReader.readIntEnum(this.mFocusableId, view.getFocusable());
            propertyReader.readBoolean(this.mFocusableInTouchModeId, view.isFocusableInTouchMode());
            propertyReader.readBoolean(this.mFocusedId, view.isFocused());
            propertyReader.readBoolean(this.mFocusedByDefaultId, view.isFocusedByDefault());
            propertyReader.readBoolean(this.mForceDarkAllowedId, view.isForceDarkAllowed());
            propertyReader.readObject(this.mForegroundId, view.getForeground());
            propertyReader.readGravity(this.mForegroundGravityId, view.getForegroundGravity());
            propertyReader.readObject(this.mForegroundTintId, view.getForegroundTintList());
            propertyReader.readObject(this.mForegroundTintModeId, (Object)view.getForegroundTintMode());
            propertyReader.readBoolean(this.mHapticFeedbackEnabledId, view.isHapticFeedbackEnabled());
            propertyReader.readResourceId(this.mIdId, view.getId());
            propertyReader.readIntEnum(this.mImportantForAccessibilityId, view.getImportantForAccessibility());
            propertyReader.readIntEnum(this.mImportantForAutofillId, view.getImportantForAutofill());
            propertyReader.readBoolean(this.mIsScrollContainerId, view.isScrollContainer());
            propertyReader.readBoolean(this.mKeepScreenOnId, view.getKeepScreenOn());
            propertyReader.readBoolean(this.mKeyboardNavigationClusterId, view.isKeyboardNavigationCluster());
            propertyReader.readResourceId(this.mLabelForId, view.getLabelFor());
            propertyReader.readIntEnum(this.mLayerTypeId, view.getLayerType());
            propertyReader.readIntEnum(this.mLayoutDirectionId, view.getLayoutDirection());
            propertyReader.readBoolean(this.mLongClickableId, view.isLongClickable());
            propertyReader.readInt(this.mMinHeightId, view.getMinimumHeight());
            propertyReader.readInt(this.mMinWidthId, view.getMinimumWidth());
            propertyReader.readBoolean(this.mNestedScrollingEnabledId, view.isNestedScrollingEnabled());
            propertyReader.readResourceId(this.mNextClusterForwardId, view.getNextClusterForwardId());
            propertyReader.readResourceId(this.mNextFocusDownId, view.getNextFocusDownId());
            propertyReader.readResourceId(this.mNextFocusForwardId, view.getNextFocusForwardId());
            propertyReader.readResourceId(this.mNextFocusLeftId, view.getNextFocusLeftId());
            propertyReader.readResourceId(this.mNextFocusRightId, view.getNextFocusRightId());
            propertyReader.readResourceId(this.mNextFocusUpId, view.getNextFocusUpId());
            propertyReader.readColor(this.mOutlineAmbientShadowColorId, view.getOutlineAmbientShadowColor());
            propertyReader.readObject(this.mOutlineProviderId, view.getOutlineProvider());
            propertyReader.readColor(this.mOutlineSpotShadowColorId, view.getOutlineSpotShadowColor());
            propertyReader.readIntEnum(this.mOverScrollModeId, view.getOverScrollMode());
            propertyReader.readInt(this.mPaddingBottomId, view.getPaddingBottom());
            propertyReader.readInt(this.mPaddingLeftId, view.getPaddingLeft());
            propertyReader.readInt(this.mPaddingRightId, view.getPaddingRight());
            propertyReader.readInt(this.mPaddingTopId, view.getPaddingTop());
            propertyReader.readObject(this.mPointerIconId, view.getPointerIcon());
            propertyReader.readBoolean(this.mPressedId, view.isPressed());
            propertyReader.readIntEnum(this.mRawLayoutDirectionId, view.getRawLayoutDirection());
            propertyReader.readIntEnum(this.mRawTextAlignmentId, view.getRawTextAlignment());
            propertyReader.readIntEnum(this.mRawTextDirectionId, view.getRawTextDirection());
            propertyReader.readIntFlag(this.mRequiresFadingEdgeId, view.getFadingEdge());
            propertyReader.readFloat(this.mRotationId, view.getRotation());
            propertyReader.readFloat(this.mRotationXId, view.getRotationX());
            propertyReader.readFloat(this.mRotationYId, view.getRotationY());
            propertyReader.readBoolean(this.mSaveEnabledId, view.isSaveEnabled());
            propertyReader.readFloat(this.mScaleXId, view.getScaleX());
            propertyReader.readFloat(this.mScaleYId, view.getScaleY());
            propertyReader.readBoolean(this.mScreenReaderFocusableId, view.isScreenReaderFocusable());
            propertyReader.readIntFlag(this.mScrollIndicatorsId, view.getScrollIndicators());
            propertyReader.readInt(this.mScrollXId, view.getScrollX());
            propertyReader.readInt(this.mScrollYId, view.getScrollY());
            propertyReader.readInt(this.mScrollbarDefaultDelayBeforeFadeId, view.getScrollBarDefaultDelayBeforeFade());
            propertyReader.readInt(this.mScrollbarFadeDurationId, view.getScrollBarFadeDuration());
            propertyReader.readInt(this.mScrollbarSizeId, view.getScrollBarSize());
            propertyReader.readIntEnum(this.mScrollbarStyleId, view.getScrollBarStyle());
            propertyReader.readBoolean(this.mSelectedId, view.isSelected());
            propertyReader.readColor(this.mSolidColorId, view.getSolidColor());
            propertyReader.readBoolean(this.mSoundEffectsEnabledId, view.isSoundEffectsEnabled());
            propertyReader.readObject(this.mStateListAnimatorId, view.getStateListAnimator());
            propertyReader.readObject(this.mTagId, view.getTag());
            propertyReader.readIntEnum(this.mTextAlignmentId, view.getTextAlignment());
            propertyReader.readIntEnum(this.mTextDirectionId, view.getTextDirection());
            propertyReader.readObject(this.mTooltipTextId, view.getTooltipText());
            propertyReader.readFloat(this.mTransformPivotXId, view.getPivotX());
            propertyReader.readFloat(this.mTransformPivotYId, view.getPivotY());
            propertyReader.readObject(this.mTransitionNameId, view.getTransitionName());
            propertyReader.readFloat(this.mTranslationXId, view.getTranslationX());
            propertyReader.readFloat(this.mTranslationYId, view.getTranslationY());
            propertyReader.readFloat(this.mTranslationZId, view.getTranslationZ());
            propertyReader.readIntEnum(this.mVisibilityId, view.getVisibility());
            return;
        }
        throw new InspectionCompanion.UninitializedPropertyMapException();
    }
}

